// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// AinvUpdate_fast
arma::mat AinvUpdate_fast(arma::uvec ch_ind, arma::mat diff, arma::mat AI);
RcppExport SEXP _estimateW_AinvUpdate_fast(SEXP ch_indSEXP, SEXP diffSEXP, SEXP AISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type ch_ind(ch_indSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type AI(AISEXP);
    rcpp_result_gen = Rcpp::wrap(AinvUpdate_fast(ch_ind, diff, AI));
    return rcpp_result_gen;
END_RCPP
}
// sampleW_fast
List sampleW_fast(arma::mat Y, double curr_sigma, arma::mat mu, arma::mat lag_mu, arma::mat W_prior, arma::mat curr_W, arma::mat curr_w, arma::mat curr_A, arma::mat curr_AI, double curr_logdet, double curr_rho, arma::vec nr_neighbors_prior, bool symmetric, bool spatial_error, bool row_standardized);
RcppExport SEXP _estimateW_sampleW_fast(SEXP YSEXP, SEXP curr_sigmaSEXP, SEXP muSEXP, SEXP lag_muSEXP, SEXP W_priorSEXP, SEXP curr_WSEXP, SEXP curr_wSEXP, SEXP curr_ASEXP, SEXP curr_AISEXP, SEXP curr_logdetSEXP, SEXP curr_rhoSEXP, SEXP nr_neighbors_priorSEXP, SEXP symmetricSEXP, SEXP spatial_errorSEXP, SEXP row_standardizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type curr_sigma(curr_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lag_mu(lag_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W_prior(W_priorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type curr_W(curr_WSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type curr_w(curr_wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type curr_A(curr_ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type curr_AI(curr_AISEXP);
    Rcpp::traits::input_parameter< double >::type curr_logdet(curr_logdetSEXP);
    Rcpp::traits::input_parameter< double >::type curr_rho(curr_rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nr_neighbors_prior(nr_neighbors_priorSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< bool >::type spatial_error(spatial_errorSEXP);
    Rcpp::traits::input_parameter< bool >::type row_standardized(row_standardizedSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleW_fast(Y, curr_sigma, mu, lag_mu, W_prior, curr_W, curr_w, curr_A, curr_AI, curr_logdet, curr_rho, nr_neighbors_prior, symmetric, spatial_error, row_standardized));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_estimateW_AinvUpdate_fast", (DL_FUNC) &_estimateW_AinvUpdate_fast, 3},
    {"_estimateW_sampleW_fast", (DL_FUNC) &_estimateW_sampleW_fast, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_estimateW(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
